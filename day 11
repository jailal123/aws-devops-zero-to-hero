🔧 Infrastructure as Code (IaC) on AWS
IaC allows provisioning cloud infrastructure using code files. Two common formats for AWS IaC are:

CloudFormation Templates (CFT): Native AWS IaC solution

Terraform: Third-party tool by HashiCorp, cloud-agnostic

🧱 CFT File Formats: YAML vs JSON
Feature	YAML	JSON
Readability	Human-readable, indentation-based	Verbose, bracket-based
Comments	Supported (#)	❌ Not supported
Usage	Preferred for long templates	Sometimes used for automation
Syntax Base	Indentation	Curly braces {}

🏗️ CloudFormation Template Structure (YAML/JSON)
All CloudFormation templates follow this structure:

yaml
Copy
Edit
AWSTemplateFormatVersion: '2010-09-09'  # ✅ Template version

Description: > 
  This template deploys an S3 bucket with logging enabled.

Metadata:      # Optional
  Author: "Jai Patel"
  Version: "1.0"

Parameters:    # Optional – for user input
  BucketName:
    Type: String
    Description: "Name of the S3 bucket"

Rules:         # Optional – condition-based validation rules
  CheckBucketName:
    Assertions:
      - Assert:
          "Fn::Not":
            - "Fn::Equals":
                - Ref: BucketName
                - "test"
        AssertDescription: "Bucket name should not be 'test'"

Mappings:      # Optional – like key-value config maps
  RegionMap:
    us-east-1:
      AMI: "ami-123456"
    ap-south-1:
      AMI: "ami-789012"

Conditions:    # Optional – logical conditions
  CreateProdResources: !Equals [ !Ref EnvType, "prod" ]

Resources:     # ✅ MANDATORY – actual infra components
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName

Outputs:       # Optional – info after stack is created
  BucketArn:
    Description: "ARN of the created bucket"
    Value: !GetAtt MyS3Bucket.Arn
🧪 CloudFormation Working Flow
Write Template (YAML/JSON)

Deploy Stack:

Via AWS Console, CLI, or API

Monitor Events

Detect Drift:

Detects if resources changed outside CFT.

Run: aws cloudformation detect-stack-drift --stack-name mystack

Update Stack:

Modify template and reapply

Delete Stack:

Deletes all associated resources

🧰 AWS CFT vs CLI vs API
Tool	Use Case	Suitable For	Example
CloudFormation (CFT)	Full infra provisioning	Production setups	Create VPC, EC2, RDS, IAM
AWS CLI	Quick, simple ops	Scripting, testing	aws s3 ls, aws ec2 describe-instances
AWS API (SDK)	Programmatic control	Integrating into apps	boto3 (Python SDK) to create EC2
IaC Tools	Reproducible infra	DevOps pipelines	Terraform, Pulumi

📦 Stacks and StackSets
Stack: A deployed instance of a CloudFormation template.

StackSet: Allows deploying stacks across multiple AWS accounts and regions.

🔄 CFT Drift Detection
Ensures your deployed infrastructure matches the original template.

Use:

bash
Copy
Edit
aws cloudformation detect-stack-drift --stack-name my-stack
aws cloudformation describe-stack-drift-detection-status --stack-drift-detection-id xxxxx
⚖️ CloudFormation vs Terraform
Feature	CloudFormation (CFT)	Terraform (TF)
Language	YAML / JSON	HCL (HashiCorp Configuration Language)
Cloud Provider	AWS Only	Multi-cloud (AWS, Azure, GCP, etc.)
State Management	Managed by AWS	Manually managed (local/remote)
Modules	Limited	Rich module system
Drift Detection	Built-in	Requires terraform refresh
Rollback Handling	Yes	Manual intervention needed
Community Modules	Medium	Very large, via Terraform Registry
Cost Estimation	Basic	Supported via terraform plan

📁 CFT Tips and Best Practices
✅ Use YAML for better readability and comments.

🔐 Store sensitive data in Parameters with NoEcho: true

🔁 Use Mappings and Conditions to reduce duplication.

🔎 Use !Ref, !GetAtt, and intrinsic functions for dynamic behavior.

🛠️ Validate templates with:

bash
Copy
Edit
aws cloudformation validate-template --template-body file://template.yaml
🔚 Summary Table
Topic	Summary
CFT File Format	YAML (preferred), JSON
API Calls	For integration or automation
CLI Use	Fast tasks like list buckets, start instances
CFT for Big Infra	VPC, Subnets, RDS, Load Balancers
Drift Detection	Ensures infra consistency
Terraform Comparison	Multi-cloud, stateful, better modules
